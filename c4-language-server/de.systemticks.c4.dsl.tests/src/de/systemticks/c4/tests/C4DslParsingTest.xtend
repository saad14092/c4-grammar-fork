/*
 * generated by Xtext 2.20.0
 */
package de.systemticks.c4.tests

import com.google.inject.Inject
import com.structurizr.dsl.StructurizrDslParser
import com.structurizr.io.plantuml.StructurizrPlantUMLWriter
import de.systemticks.c4.c4Dsl.Workspace
import java.io.File
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.junit.Assert.assertArrayEquals
import static org.junit.Assert.assertEquals

import static extension de.systemticks.c4.utils.C4Utils.*

@ExtendWith(InjectionExtension)
@InjectWith(C4DslInjectorProvider)
class C4DslParsingTest {
	@Inject
	ParseHelper<Workspace> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			workspace "My Workspace "{
				model {
				}
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')		
	}
	
	@Test
	def void testCustomTag() {
		
		val result = parseHelper.parse('''
			workspace "My Workspace "{
				model {
					financialRiskSystem = softwareSystem "Financial Risk System" "Calculates the bank's exposure to risk for product X." "Financial Risk System"
				}
		''')
		
		val tags = result.model.softwareSystems.head.tags
		
		assertEquals(3, tags.size)
		assertArrayEquals(#['Financial Risk System', DEFAULT_SOFTWARE_SYSTEM_TAG, ELEMENT_TAG], tags)		
		
	}
	
	@Test
	def void testPlantUmlGenerator() {

		val rawDsl = '''
		workspace "Getting Started" "This is a model of my software system." {
		
		    model {
		        user = person "User" "A user of my software system."
		        softwareSystem = softwareSystem "Software System" "My software system."
		
		        user -> softwareSystem "Uses"
		    }
		
		    views {
		        systemContext softwareSystem "SystemContext" "An example of a System Context diagram." {
		            include *
		            autoLayout
		        }
		
		        styles {
		            element "Software System" {
		                background #1168bd
		                color #ffffff
		            }
		            element "Person" {
		                shape person
		                background #08427b
		                color #ffffff
		            }
		        }
		    }
		
		}		
		'''
		
		 val parser = new StructurizrDslParser();

		 parser.parse(rawDsl);
		 
		 assertEquals("Getting Started", parser.workspace.name);
		 assertEquals(1, parser.workspace.model.softwareSystems.size)
		 assertEquals(1, parser.workspace.model.people.size)
		 assertEquals(1, parser.workspace.model.relationships.size)
		 
		 assertEquals("User",parser.workspace.model.relationships.get(0).source.name)
		 assertEquals("Software System",parser.workspace.model.relationships.get(0).destination.name)

		 val writer = new StructurizrPlantUMLWriter();
				 
		 parser.workspace.views.systemContextViews.forEach[ view | 
		 	println( writer.toString(view))	
		 ]
		
		
	}
	
}
