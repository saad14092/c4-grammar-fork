grammar de.systemticks.c4.C4Dsl with org.eclipse.xtext.common.Terminals

generate c4Dsl "http://www.systemticks.de/c4/C4Dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

C4Model:
	(includeableSection=IncludeableSection | workspace=Workspace)
;

Workspace:
	{Workspace} 'workspace' (name=STRING | name=STRING description=STRING)? '{'
		model = Model
		viewSection = ViewSection?
	'}'
;	

// Model
IncludeableSection:
		{IncludeableSection} (
			includes+=Import |
			person+=Person | 
			 softwareSystems+=SoftwareSystem |
			 relationShips+=RelationShip)*		
;

Import:
	'!include' importURI=INCLUDE_PATH
;

INCLUDE_PATH: ID ('/' ID)* '.dsl' | STRING;

Model:		
	{Model} 'model'  '{'
		includes+=Import*
		(
			enterprise=Enterprise? &		
			( person+=Person | 
			  softwareSystems+=SoftwareSystem |
			  deploymentEnvironments+=DeploymentEnvironment |
			  relationShips+=RelationShip)*
		)	
	'}'
;

AnyModelElement:
	BasicModelElement | DeploymentElement
;

BasicModelElement:
	Person | SoftwareSystem | Container | Component
;

DeploymentElement:
	DeploymentNode | InfrastructureNode | SoftwareSystemInstance | ContainerInstance
;

Enterprise:
	'enterprise' label=STRING '{'
		(	person+=Person | 
			softwareSystems+=SoftwareSystem |
			relationShips+=RelationShip
		)*	
	'}'
;

//[<identifier> = ]person <name> [description] [tags]
Person:
	(name=ID '=')? 'person' label=STRING (description=STRING | description=STRING taglist=STRING)? 
;

Component:
	(name=ID '=')? 'component' label=STRING 
		(description=STRING | description=STRING technology=STRING | description=STRING technology=STRING taglist=STRING)? 	
;

Container:
	(name=ID '=')? 'container' label=STRING
		(description=STRING | description=STRING technology=STRING | description=STRING technology=STRING taglist=STRING)? 	
	('{'
		components+=Component+
	'}')?
;

SoftwareSystem:
	(name=ID '=')? ('softwareSystem'|'softwaresystem') label=STRING (description=STRING | description=STRING taglist=STRING)?  
	('{'
		container+=Container+
	'}')?
;

// Deployment
DeploymentEnvironment:
	'deploymentEnvironment' label=STRING 
	('{'
		deploymentNodes+=DeploymentNode+
		relationShips+=RelationShip*		
	'}')?		
;

DeploymentNode:
	(name=ID '=')? 'deploymentNode' label=STRING 
		(description=STRING | description=STRING technology=STRING | description=STRING technology=STRING taglist=STRING)? instances=INT?
	('{'
		(
		deploymentNodes+=DeploymentNode |
		infrastructureNodes+=InfrastructureNode |
		softwareSystemInstances+=SoftwareSystemInstance |
		containerInstances+=ContainerInstance)+
	'}')?		
;

InfrastructureNode:
	(name=ID '=')?'infrastructureNode' label=STRING 
		(description=STRING | description=STRING technology=STRING | description=STRING technology=STRING taglist=STRING)? 	
;

SoftwareSystemInstance:
	(name=ID '=')?'softwareSystemInstance' softwareSystem=[SoftwareSystem] taglist=STRING?
;

ContainerInstance:
	(name=ID '=')? 'containerInstance' container=[Container] taglist=STRING?
;

// RelationShips
RelationShip:
	from=[AnyModelElement] "->" to=[AnyModelElement] 
		(description=STRING | description=STRING technology=STRING | description=STRING technology=STRING taglist=STRING)? 	
;

// Views
ViewSection:
	{ViewSection} 'views' '{'
		(views += View |
		styles += Styles )*
		theme=Theme?
	'}'
;

View:
	SystemLandscape | SystemContextView | ContainerView | ComponentView | DeploymentView | DynamicView
;

SystemLandscape:
	('systemLandscape'|'systemlandscape') (key=STRING | key=STRING description=STRING)? '{'
		content=CustomizedContent
	'}'
;

SystemContextView:
	('systemContext'|'systemcontext') system=[SoftwareSystem] (key=STRING | key=STRING description=STRING)? '{'
		content=CustomizedContent
	'}'
;

ContainerView:
	'container' system=[SoftwareSystem] (key=STRING | key=STRING description=STRING)? '{'
		content=CustomizedContent
	'}' 
;

ComponentView:
	'component' container=[Container] (key=STRING | key=STRING description=STRING)? '{'
		content=CustomizedContent
	'}' 
;

//deployment <*|software system identifier> <environment name> [key] [description] {

DeploymentView:
	'deployment' (all?='*' | system=[SoftwareSystem]) environment=STRING (key=STRING | key=STRING description=STRING)? '{'
		content=CustomizedContent	
	'}'
;

//dynamic <*|software system identifier|container identifier> [key] [description] {
//	...
//}
DynamicView: 
	'dynamic' (all?='*' | reference=[BasicModelElement]) (key=STRING | key=STRING description=STRING)? '{'
			relationShips+=RelationShip*
	 		(autoLayout = AutoLayout? &
	 		('title' title = STRING)?)
	'}'
;

CustomizedContent:	 
		{CustomizedContent} (
			includes += Include* &
	 		excludes += Exclude* &
	 		autoLayout = AutoLayout? &
	 		animationStep += AnimationStep* &
	 		('title' title = STRING)?
	 	)	
;

AutoLayout:
	{AutoLayout} ('autoLayout'|'autolayout') direction=LayoutDirection? (rankSeperation=INT | rankSeperation=INT nodeSeperation=INT)?
;

enum LayoutDirection:
	tb|bt|lr|rl;

Include:
	'include' (all?='*' | elements+=[AnyModelElement]+)	
;

Exclude:
	'exclude' elements+=[AnyModelElement]+	
;

AnimationStep:
	'animationStep' elements+=[AnyModelElement]+	
;


Styles:
	{Styles} 'styles' '{'
		(styledElements+=StyledElement |
		styledRelationShips+=StyledRelationShip)*
	'}'
;

StyledElement:
	'element' tag=STRING '{'
		(
			('shape' shape=ID)? &
			('icon' file=STRING)? &
			('width' width=INT)? &
			('height' height=INT)? &			 
			('background' backgroundColor=HEX_DECIMAL)? &
			('color' color=HEX_DECIMAL)? &
			('colour' colour=HEX_DECIMAL)? & 
			('stroke' stroke=HEX_DECIMAL)? &
			('fontSize' fontSize=INT)? & 
			('border' border=("solid"|"dashed"|"dotted"))? &
			('opacity' opacity=INT)? &
			('metadata' metadata=("true"|"false"))? & 
			('description' description=("true"|"false"))?		
		)  
	'}'
;

StyledRelationShip:
	'relationship' tag=STRING '{'
		(
			('thickness' thickness=INT)? &
			('color' color=HEX_DECIMAL)? &
			('colour' colour=HEX_DECIMAL)? & 
			('dashed' dashed=("true"|"false"))? &
			('routing' routing=("Direct"|"Orthogonal"|"Curved"))? &
			('fontSize' fontSize=INT)? &
			('width' width=INT)? &
			('position' position=INT)? &
			('opacity' opacity=INT)?						 
		)
	'}'
;

//enum StyleShape:	
//	Box|RoundedBox|Circle|Ellipse|Hexagon|Cylinder|Pipe|Person|Robot|Folder|WebBrowser|MobileDevicePortrait|MobileDeviceLandscape|Component	;

Theme:
	'themes' (urls+=STRING)+
;

terminal HEX_DECIMAL: '#' (('0'..'9') | ('A' .. 'F') | ('a' .. 'f') )+;

@Override 
terminal SL_COMMENT : ('# '|'//') !('\n'|'\r')* ('\r'? '\n')?;

//terminal URL: 'http' ('s'?) '://' ID ('.'|'/' ID)*;
