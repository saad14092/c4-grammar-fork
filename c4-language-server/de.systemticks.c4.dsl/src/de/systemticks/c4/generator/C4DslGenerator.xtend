/*
 * generated by Xtext 2.19.0
 */
package de.systemticks.c4.generator

import com.structurizr.dsl.StructurizrDslParser
import de.systemticks.c4.c4Dsl.ComponentView
import de.systemticks.c4.c4Dsl.ContainerView
import de.systemticks.c4.c4Dsl.SystemContextView
import de.systemticks.c4.c4Dsl.Workspace
import de.systemticks.c4.generator.plantuml.C4ToPlantUmlComponentView
import de.systemticks.c4.generator.plantuml.C4ToPlantUmlContainerView
import de.systemticks.c4.generator.plantuml.C4ToPlantUmlSystemContextView
import java.io.File
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.structurizr.io.plantuml.StructurizrPlantUMLWriter

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class C4DslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		generateWithStructurizrDslParser(resource, fsa)
				
//		val workspace = resource.allContents.filter(Workspace).head
//				
//		resource.allContents.filter(Workspace).head.viewSection.views.forEach[ view | 
//			
//			switch view {
//				SystemContextView: fsa.generateFile(view.system.name+'_systemcontext.puml', new C4ToPlantUmlSystemContextView(workspace).transform(view))
//				ContainerView: fsa.generateFile(view.system.name+'_container.puml', new C4ToPlantUmlContainerView(workspace).transform(view))
//				ComponentView: fsa.generateFile(view.container.name+'_component.puml', new C4ToPlantUmlComponentView(workspace).transform(view))
//			}						
//		]
		
	}
	
	def generateWithStructurizrDslParser(Resource resource, IFileSystemAccess2 fsa) {
				
		 val parser = new StructurizrDslParser();
		 val filename = resource.URI.toFileString

		 parser.parse(new File(filename));

		 val writer = new StructurizrPlantUMLWriter();
		
		 val fn = resource.URI.lastSegment.split('\\.').head

		 // generate all system context views				 
		 parser.workspace.views.systemContextViews.forEach[ contextView | 
		 	fsa.generateFile(fn+'_systemContext_'+contextView.softwareSystem.name+".puml", writer.toString(contextView))
		 ]
		 
		 parser.workspace.views.containerViews.forEach[ containerView |
		 	fsa.generateFile(fn+'_container_'+containerView.softwareSystem.name+".puml", writer.toString(containerView))		 	
		 ]
				 		 		 
	}
}
